# Integration-First Testing Techniques

## Core Principle
**TEST INTEGRATION BEFORE ISOLATION** - Start with how components work together, not how they work alone. Integration tests catch real problems; unit tests catch theoretical problems.

## Integration Testing Approach

### 1. **Start with Integration Tests**
```typescript
// ‚úÖ CORRECT: Test how components work together
test('User can see reading widgets on dashboard', async () => {
  // Mock real plugin installation
  mockInstalledPlugins([{ id: 'reading-core', status: 'enabled' }]);
  
  render(<DashboardPage />);
  
  // Test the full integration
  await waitFor(() => {
    expect(screen.getByText('üìö Book Library')).toBeInTheDocument();
    expect(screen.getByText('üïí Recently Read')).toBeInTheDocument();
  });
});
```

### 2. **Test Component Cooperation**
```typescript
// ‚úÖ CORRECT: Test that components work together to deliver value
describe('Dashboard Integration', () => {
  test('Dashboard shows user-relevant content based on plugins', async () => {
    // Mock realistic user state
    mockUserState({
      installedPlugins: ['reading-core'],
      preferences: { theme: 'dark' }
    });
    
    render(<DashboardPage />);
    
    // Test that integration delivers value
    await waitFor(() => {
      expect(screen.getByText('üìö Book Library')).toBeInTheDocument();
      expect(screen.getByText('üïí Recently Read')).toBeInTheDocument();
    });
    
    // Test that widgets are actually functional
    await userEvent.click(screen.getByText('Add Book'));
    expect(screen.getByText('Add New Book')).toBeInTheDocument();
  });
});
```

### 3. **Test Service Integration**
```typescript
// ‚úÖ CORRECT: Test that services work together
describe('Plugin System Integration', () => {
  test('Plugin installation updates dashboard widgets', async () => {
    // Test the full service integration
    await installPlugin('reading-core');
    await refreshDashboard();
    
    // Verify the integration worked
    expect(screen.getByText('üìö Book Library')).toBeInTheDocument();
    expect(screen.getByText('üïí Recently Read')).toBeInTheDocument();
  });
});
```

## Integration Testing Techniques

### Realistic Mocking Strategy
```typescript
// ‚úÖ GOOD: Use realistic mocks that simulate real behavior
const mockPluginManager = {
  getInstalledPlugins: jest.fn().mockResolvedValue([
    { id: 'reading-core', status: 'enabled', version: '1.0.0' }
  ]),
  installPlugin: jest.fn().mockImplementation(async (pluginId) => {
    // Simulate real installation process
    await new Promise(resolve => setTimeout(resolve, 100));
    return { success: true, pluginId };
  })
};
```

### Error Scenario Integration
```typescript
// ‚úÖ GOOD: Test integration error scenarios
describe('Integration Error Handling', () => {
  test('Dashboard handles plugin service failures gracefully', async () => {
    // Mock service failure
    mockPluginServiceFailure();
    
    render(<DashboardPage />);
    
    // Test that integration handles errors gracefully
    await waitFor(() => {
      expect(screen.getByText('Unable to load plugins')).toBeInTheDocument();
      expect(screen.getByText('Please try again later')).toBeInTheDocument();
    });
  });
});
```

## Anti-Patterns to Avoid

### 1. **Mock Data Dependency**
```typescript
// ‚ùå ANTI-PATTERN: Tests that always pass with mock data
const mockData = { /* always works */ };
render(<Component data={mockData} />);
```

### 2. **Isolation-Only Testing**
```typescript
// ‚ùå ANTI-PATTERN: Only test components in isolation
test('Component renders', () => {
  render(<Component />);
  // No integration testing
});
```

### 3. **Happy Path Only**
```typescript
// ‚ùå ANTI-PATTERN: Only test success scenarios
test('Component works with data', () => {
  // No failure scenario testing
});
```

## Success Metrics

### Quality Gates:
- ‚úÖ Integration tests pass with real data
- ‚úÖ End-to-end user journeys work
- ‚úÖ Failure scenarios are handled gracefully

### Definition of Done:
A feature is only "done" when:
1. Integration tests pass with real scenarios
2. End-to-end tests verify user journey
3. Failure scenarios are tested and handled
4. Unit tests cover edge cases

## Metadata
priority: critical
category: testing_techniques
scope: integration_testing
enforcement: mandatory
description: Integration-first testing approach that prioritizes component cooperation over isolation
globs: ["**/*.test.ts", "**/*.test.tsx", "**/*.spec.ts", "**/*.spec.tsx"]
alwaysApply: true
---
