---
alwaysApply: true
---
# Definition of Done Enforcement Rule

Enforces a strict workflow aligned with Kiro's spec-driven development methodology to ensure features are properly specified, designed, tested, implemented, and documented before considering them done.

<rule>
name: definition_of_done
filters:
  - type: event
    pattern: "user_request|task_start"
  - type: command
    pattern: "implement|develop|fix|add|complete|done"
  - type: event
    pattern: "implementation_complete|task_complete"

actions:
  - type: react
    event: "task_start"
    conditions:
      - pattern: "implement|develop|add|fix"
    priority: critical
    action: |
      # KIRO DEFINITION OF DONE WORKFLOW
      
      Follow this process for all development tasks using Kiro's spec structure:
      
      **Step 1: 📋 Ensure Spec Foundation Exists**
      - Verify `.kiro/specs/{feature_name}/requirements.md` exists with EARS format requirements
      - Verify `.kiro/specs/{feature_name}/design.md` exists with architecture and components
      - Verify `.kiro/specs/{feature_name}/tasks.md` exists with numbered task breakdown
      - Review `.kiro/steering/` files for project standards and architecture guidelines
      
      **Step 2: 🎯 Identify Current Task**
      - Reference specific task from tasks.md file
      - Update task status to in progress with [-] in tasks.md
      - Ensure task references specific requirements from requirements.md
      - Check task has not already been completed even if not marked completed
      
      **Step 3: ✅ Write Tests First (TDD)**
      - Create comprehensive test coverage for the specific task
      - Include unit tests, integration tests, and error handling tests
      - Tests should validate requirements referenced in the task
      
      **Step 4: 🏗 Implement Minimal Code**
      - Build only what's needed to pass the tests for this specific task
      - Follow the design patterns outlined in design.md
      - Follow modular feature-based architecture from `.kiro/steering/structure.md`
      - Implement proper error handling and logging per `.kiro/steering/quality.md`
      
      I will NOT proceed beyond Step 4 until Steps 1-3 are complete.

  - type: react
    event: "implementation_complete"
    priority: critical
    action: |
      # COMPLETE KIRO DEFINITION OF DONE
      
      After implementation:
      
      **Step 5: 🧪 Verify Production-Ready Quality Gates**
      
      **MANDATORY QUALITY GATES - ALL MUST PASS BEFORE PROCEEDING:**
      
      **Gate 1: TypeScript Compilation Gate**
      - ALL TypeScript compilation must succeed with zero errors
      - No compilation warnings that could lead to runtime issues
      - All type definitions must be complete and accurate
      - Command: `npm run build` or `tsc --noEmit` must pass completely
      
      **Gate 2: Core Test Suite Gate** 
      - Core test suite must maintain >80% pass rate minimum
      - All critical functionality tests must pass
      - No failing tests in core system components
      - Command: `npm test` must show >80% pass rate
      
      **Gate 3: Critical Services Gate**
      - All critical services must have working interfaces
      - Core system APIs must be functional and responsive
      - Authentication, plugin manager, settings, and UI shell must be operational
      - Integration tests for critical services must pass
      
      **Additional Quality Verification:**
      - Run all tests (unit, integration, end-to-end)
      - Ensure no regressions in existing functionality
      - Verify error handling works as designed
      - Confirm all acceptance criteria are met
      
      **Step 6: 📚 Update Documentation**
      - Update any relevant README
      - Update all tasks that have been completed 
      - Update specs files in `.kiro/specs/` if applicable
      - Update API documentation if applicable
      - Add code comments for complex logic
      - Update steering files in `.kiro/steering/` if patterns changed
      
      **Step 7: 📌 Update Task Status**
      - Mark current task as completed with [x] in tasks.md
      - Update tasks.md with any implementation notes
      - Verify task requirements are fully satisfied
      
      **Step 8: 🔄 Prepare for Next Task**
      - Commit changes with conventional commit format
      - Identify next task in tasks.md 
      - Continue on to next task and repeat the process
      - Keep going until all tasks are completed

  - type: reject
    conditions:
      - pattern: "complete|done"
      - missing: "all_steps_completed"
    message: |
      🚫 **KIRO DEFINITION OF DONE NOT MET**
      
      Cannot mark as complete until all steps are verified:
      1. Spec foundation exists (requirements.md, design.md, tasks.md) and steering reviewed
      2. Current task identified and marked in_progress
      3. Tests written first (TDD approach)
      4. Minimal implementation completed following steering guidelines
      5. Production-ready quality gates passed:
         - **TypeScript Compilation Gate**: All compilation succeeds (zero errors)
         - **Core Test Suite Gate**: >80% pass rate maintained  
         - **Critical Services Gate**: All critical services have working interfaces
      6. All tests passing
      7. Documentation updated
      8. Task status updated to completed
      9. Changes committed
      
      Please complete missing steps following Kiro's spec workflow.

  - type: suggest
    message: |
      ### Kiro Definition of Done Checklist
      
      - [ ] 1. 📋 Spec foundation verified (.kiro/specs/{feature}/requirements.md, design.md, tasks.md)
      - [ ] 1.1. 🎯 Steering guidelines reviewed (.kiro/steering/ for architecture and quality standards)
      - [ ] 2. 🎯 Current task identified and status set to in progress
      - [ ] 3. ✅ Tests written first (TDD approach)
      - [ ] 4. 🏗 Minimal implementation following modular feature-based architecture
      - [ ] 5. 🚦 Production-ready quality gates passed:
        - [ ] 5.1. **TypeScript Compilation Gate**: All compilation succeeds (zero errors)
        - [ ] 5.2. **Core Test Suite Gate**: >80% pass rate maintained
        - [ ] 5.3. **Critical Services Gate**: All critical services have working interfaces
      - [ ] 6. 🧪 All tests passing (unit, integration, e2e)
      - [ ] 7. � Doscumentation updated (README, API docs, steering, specs)
      - [ ] 8. � CTasks status updated to completed
      - [ ] 9. 🔄 Changes committed, ready for next task

examples:
  - input: "Implement authentication feature"
    output: "Starting Kiro DoD: First verify spec exists at .kiro/specs/authentication/"
  - input: "Mark task as done without tests"
    output: "Reject: Kiro DoD not met - TDD requires tests before implementation."

metadata:
  priority: critical
  version: 2.0
  type: kiro_workflow
  enforcement: strict
</rule>